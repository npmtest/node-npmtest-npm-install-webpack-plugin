{"/home/travis/build/npmtest/node-npmtest-npm-install-webpack-plugin/test.js":"/* istanbul instrument in package npmtest_npm_install_webpack_plugin */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-npm-install-webpack-plugin/lib.npmtest_npm_install_webpack_plugin.js":"/* istanbul instrument in package npmtest_npm_install_webpack_plugin */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_npm_install_webpack_plugin = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_npm_install_webpack_plugin = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-npm-install-webpack-plugin/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-npm-install-webpack-plugin && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_npm_install_webpack_plugin */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_npm_install_webpack_plugin\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught.stack);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_npm_install_webpack_plugin.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        local.assetsDict['/assets.npmtest_npm_install_webpack_plugin.rollup.js'] =\n            local.assetsDict['/assets.npmtest_npm_install_webpack_plugin.rollup.js'] ||\n            local.fs.readFileSync(\n                // buildCustomOrg-hack\n                local.npmtest_npm_install_webpack_plugin.__dirname +\n                    '/lib.npmtest_npm_install_webpack_plugin.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-npm-install-webpack-plugin/npm-install-webpack-plugin/index.js":"module.exports = require(\"./src/plugin.js\");\n","/home/travis/build/npmtest/node-npmtest-npm-install-webpack-plugin/npm-install-webpack-plugin/src/plugin.js":"var MemoryFS = require(\"memory-fs\");\nvar webpack = require(\"webpack\");\n\nvar installer = require(\"./installer\");\n\nvar depFromErr = function(err) {\n  if (!err) {\n    return undefined;\n  }\n\n  /**\n   * Supported package formats:\n   * - path\n   * - react-lite\n   * - @cycle/core\n   * - bootswatch/lumen/bootstrap.css\n   * - lodash.random\n   */\n  var matches = /(?:(?:Cannot resolve module)|(?:Can't resolve)) '([@\\w\\/\\.-]+)' in/.exec(err);\n\n  if (!matches) {\n    return undefined;\n  }\n\n  return matches[1];\n}\n\nfunction NpmInstallPlugin(options) {\n  this.preCompiler = null;\n  this.compiler = null;\n  this.options = Object.assign(installer.defaultOptions, options);\n  this.resolving = {};\n\n  installer.checkPackage();\n  installer.checkBabel();\n}\n\nNpmInstallPlugin.prototype.apply = function(compiler) {\n  this.compiler = compiler;\n\n  // Recursively install missing dependencies so primary build doesn't fail\n  compiler.plugin(\"watch-run\", this.preCompile.bind(this));\n\n  // Install externals that wouldn't normally be resolved\n  if (Array.isArray(compiler.options.externals)) {\n    compiler.options.externals.unshift(this.resolveExternal.bind(this));\n  }\n\n  // Install loaders on demand\n  compiler.resolvers.loader.plugin(\"module\", this.resolveLoader.bind(this));\n\n  // Install project dependencies on demand\n  compiler.resolvers.normal.plugin(\"module\", this.resolveModule.bind(this));\n};\n\nNpmInstallPlugin.prototype.install = function(result) {\n  if (!result) {\n    return;\n  }\n\n  var dep = installer.check(result.request);\n\n  if (dep) {\n    var dev = this.options.dev;\n\n    if (typeof this.options.dev === \"function\") {\n      dev = !!this.options.dev(result.request, result.path);\n    }\n\n    installer.install(dep, Object.assign({}, this.options, { dev: dev }));\n  }\n}\n\nNpmInstallPlugin.prototype.preCompile = function(compilation, next) {\n  if (!this.preCompiler) {\n    var options = this.compiler.options;\n    var config = Object.assign(\n      // Start with new config object\n      {},\n      // Inherit the current config\n      options,\n      {\n        // Ensure fresh cache\n        cache: {},\n        // Register plugin to install missing deps\n        plugins: [\n          new NpmInstallPlugin(this.options),\n        ],\n      }\n    );\n\n    this.preCompiler = webpack(config);\n    this.preCompiler.outputFileSystem = new MemoryFS();\n  }\n\n  this.preCompiler.run(next);\n};\n\nNpmInstallPlugin.prototype.resolveExternal = function(context, request, callback) {\n  // Only install direct dependencies, not sub-dependencies\n  if (context.match(\"node_modules\")) {\n    return callback();\n  }\n\n  // Ignore !!bundle?lazy!./something\n  if (request.match(/(\\?|\\!)/)) {\n    return callback();\n  }\n\n  var result = {\n    context: {},\n    path: context,\n    request: request,\n  };\n\n  this.resolve(result, function(err, filepath) {\n    if (err) {\n      this.install(Object.assign({}, result, { request: depFromErr(err) }));\n    }\n\n    callback();\n  }.bind(this));\n};\n\nNpmInstallPlugin.prototype.resolve = function(result, callback) {\n  var version = require(\"webpack/package.json\").version;\n  var major = version.split(\".\").shift();\n\n  if (major === \"1\") {\n    return this.compiler.resolvers.normal.resolve(\n      result.path,\n      result.request,\n      callback\n    );\n  }\n\n  if (major === \"2\") {\n    return this.compiler.resolvers.normal.resolve(\n      result.context || {},\n      result.path,\n      result.request,\n      callback\n    );\n  }\n\n  throw new Error(\"Unsupport Webpack version: \" + version);\n}\n\nNpmInstallPlugin.prototype.resolveLoader = function(result, next) {\n  // Ensure loaders end with `-loader` (e.g. `babel` => `babel-loader`)\n  // Also force Webpack2's duplication of `-loader` to a single occurrence\n  var loader = result.request // e.g. react-hot-loader/webpack\n      .split(\"/\")             // [\"react-hot-loader\", \"webpack\"]\n      .shift()                // \"react-hot-loader\"\n      .split(\"-loader\")       // [\"react-hot\", \"\"]\n      .shift()                // \"react-hot\"\n      .concat(\"-loader\")       // \"react-hot-loader\"\n  ;\n\n  this.install(Object.assign({}, result, { request: loader }));\n\n  return next();\n};\n\nNpmInstallPlugin.prototype.resolveModule = function(result, next) {\n  // Only install direct dependencies, not sub-dependencies\n  if (result.path.match(\"node_modules\")) {\n    return next();\n  }\n\n  if (this.resolving[result.request]) {\n    return next();\n  }\n\n  this.resolving[result.request] = true;\n\n  this.resolve(result, function(err, filepath) {\n    this.resolving[result.request] = false;\n\n    if (err) {\n      this.install(Object.assign({}, result, { request: depFromErr(err) }));\n    }\n\n    return next();\n  }.bind(this));\n};\n\nmodule.exports = NpmInstallPlugin;\n","/home/travis/build/npmtest/node-npmtest-npm-install-webpack-plugin/npm-install-webpack-plugin/src/installer.js":"var spawn = require(\"cross-spawn\");\nvar fs = require(\"fs\");\nvar path = require(\"path\");\nvar util = require(\"util\");\n\nvar EXTERNAL = /^\\w[a-z\\-0-9\\.]+$/; // Match \"react\", \"path\", \"fs\", \"lodash.random\", etc.\nvar PEERS = /UNMET PEER DEPENDENCY ([a-z\\-0-9\\.]+)@(.+)/gm;\n\nvar defaultOptions = { dev: false, peerDependencies: true };\nvar erroneous = [];\n\nmodule.exports.check = function(request) {\n  if (!request) {\n    return;\n  }\n\n  var namespaced = request.charAt(0) === \"@\";\n  var dep = request.split(\"/\")\n    .slice(0, namespaced ? 2 : 1)\n    .join(\"/\")\n  ;\n\n  // Ignore relative modules, which aren't installed by NPM\n  if (!dep.match(EXTERNAL) && !namespaced) {\n    return;\n  }\n\n  try {\n    var pkgPath = require.resolve(path.join(process.cwd(), \"package.json\"));\n    var pkg = require(pkgPath);\n\n    // Remove cached copy for future checks\n    delete require.cache[pkgPath];\n  } catch(e) {\n    throw e;\n  }\n\n  var hasDep = pkg.dependencies && pkg.dependencies[dep];\n  var hasDevDep = pkg.devDependencies && pkg.devDependencies[dep];\n\n  // Bail early if we've already installed this dependency\n  if (hasDep || hasDevDep) {\n    return;\n  }\n\n  // Ignore linked modules\n  try {\n    var stats = fs.lstatSync(path.join(process.cwd(), \"node_modules\", dep));\n\n    if (stats.isSymbolicLink()) {\n      return;\n    }\n  } catch(e) {\n    // Module exists in node_modules, but isn't symlinked\n  }\n\n  // Ignore NPM global modules (e.g. \"path\", \"fs\", etc.)\n  try {\n    var resolved = require.resolve(dep);\n\n    // Global modules resolve to their name, not an actual path\n    if (resolved.match(EXTERNAL)) {\n      return;\n    }\n  } catch(e) {\n    // Module is not resolveable\n  }\n\n  return dep;\n};\n\nmodule.exports.checkBabel = function checkBabel() {\n  try {\n    var babelrc = require.resolve(path.join(process.cwd(), \".babelrc\"));\n  } catch (e) {\n    // Babel isn't installed, don't install deps\n    return;\n  }\n\n  // Default plugins/presets\n  var options = Object.assign({\n    plugins: [],\n    presets: [],\n  }, JSON.parse(fs.readFileSync(babelrc, \"utf8\")));\n\n  if (!options.env) {\n    options.env = {};\n  }\n\n  if (!options.env.development) {\n    options.env.development = {};\n  }\n\n  // Default env.development plugins/presets\n  options.env.development = Object.assign({\n    plugins: [],\n    presets: [],\n  }, options.env.development);\n\n  // Accumulate babel-core (required for babel-loader)+ all dependencies\n  var deps = [\"babel-core\"].concat(options.plugins.map(function(plugin) {\n    return \"babel-plugin-\" + plugin;\n  })).concat(options.presets.map(function(preset) {\n    return \"babel-preset-\" + preset;\n  })).concat(options.env.development.plugins.map(function(plugin) {\n    return \"babel-plugin-\" + plugin;\n  })).concat(options.env.development.presets.map(function(preset) {\n    return \"babel-preset-\" + preset;\n  }));\n\n  // Check for missing dependencies\n  var missing = deps.filter(function(dep) {\n    return this.check(dep);\n  }.bind(this));\n\n  // Install missing dependencies\n  this.install(missing);\n};\n\nmodule.exports.checkPackage = function checkPackage() {\n  try {\n    require.resolve(path.join(process.cwd(), \"package.json\"));\n\n    return;\n  } catch (e) {\n    // package.json does not exist\n  }\n\n  console.info(\"Initializing `%s`...\", \"package.json\");\n  spawn.sync(\"npm\", [\"init\", \"-y\"], { stdio: \"inherit\" });\n};\n\nmodule.exports.defaultOptions = defaultOptions;\n\nmodule.exports.install = function install(deps, options) {\n  if (!deps) {\n    return;\n  }\n\n  if (!Array.isArray(deps)) {\n    deps = [deps];\n  }\n\n  options = Object.assign({}, defaultOptions, options);\n\n  // Ignore known, erroneous modules\n  deps = deps.filter(function(dep) {\n    return erroneous.indexOf(dep) === -1;\n  });\n\n  if (!deps.length) {\n    return;\n  }\n\n  var args = [\"install\"].concat(deps).filter(Boolean);\n\n  args.push(options.dev ? \"--save-dev\" : \"--save\");\n\n  deps.forEach(function(dep) {\n    console.info(\"Installing %s...\", dep);\n  });\n\n  // Ignore input, capture output, show errors\n  var output = spawn.sync(\"npm\", args, {\n    stdio: [\"ignore\", \"pipe\", \"inherit\"]\n  });\n\n  if (output.status) {\n    deps.forEach(function(dep) {\n      erroneous.push(dep);\n    });\n  }\n\n  var matches = null;\n  var peers = [];\n\n  // RegExps track return a single result each time\n  while (matches = PEERS.exec(output.stdout)) {\n    var dep = matches[1];\n    var version = matches[2];\n\n    // Ranges don't work well, so let NPM pick\n    if (version.match(\" \")) {\n      peers.push(dep);\n    } else {\n      peers.push(util.format(\"%s@%s\", dep, version));\n    }\n  }\n\n  if (options.peerDependencies && peers.length) {\n    console.info(\"Installing peerDependencies...\");\n    this.install(peers, options);\n    console.info(\"\");\n  }\n\n  return output;\n};\n"}